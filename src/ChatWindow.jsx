import React, { useState, useEffect, useRef } from "react";
import { Configuration, OpenAIApi } from "openai";
import { Button } from 'react-bootstrap';
import hljs from 'highlight.js';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPaperPlane, faGear, faImage } from '@fortawesome/free-solid-svg-icons';
import { TypeAnimation } from 'react-type-animation';
import ChatWindowSettings from "./ChatWindowSettings";

const ChatWindow = () => {
  const [message, setMessage] = useState("");
  const [temperature, setTemperature] = useState(0.5);
  const [apiKey, setApiKey] = useState('');
  const [model, setModel] = useState("text-davinci-003");
  const [maxTokens, setMaxTokens] = useState(1536);
  const [loading, setLoading] = useState(false);
  const [conversation, setConversation] = useState([]);
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const chatContainerRef = useRef(null);
  const [imageResolution, setImageResolution] = useState("512x512");
  const [images, setImages] = useState([]);
  const [frequencyPenalty, setFrequencyPenalty] = useState(0);
  const [presencePenalty, setPresencePenalty] = useState(0);


  const configuration = new Configuration({
    apiKey: apiKey,
  });

  const openai = new OpenAIApi(configuration);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setConversation([...conversation, { message: message, author: "User", timestamp: new Date() }]);
    const previousMessages = conversation.map(chat => chat.message).join("\n");
    const prompt = previousMessages + "\n" + message;
    const response = await openai.createCompletion({
      model: model,
      prompt: prompt,
      temperature: parseFloat(temperature),
      max_tokens: maxTokens,
      frequency_penalty: parseFloat(frequencyPenalty),
      presence_penalty: parseFloat(presencePenalty)
    })
      .then(response => {
        if (response && response.data.choices && response.data.choices.length > 0) {
          setConversation(
            [
              ...conversation,
              { message: message, author: "User", timestamp: new Date() },
              { message: response.data.choices[0].text, author: "AI", timestamp: new Date() }
            ]
          );
        } else {
          console.log('No response from API.');
        }
        setLoading(false);
      })
      .catch(error => console.log(error));
    setMessage("");
  }

  const handleClearHistory = () => {
    setConversation([]);
  }

  const handleRequestImage = async (e) => {
    e.preventDefault();
    setLoading(true);
    const response = await openai.createImage({
      prompt: message,
      model: "image-alpha-001",
      size: imageResolution,
      n: 1
    })
      .then(response => {
        if (response && response.data.data && response.data.data.length > 0) {
          const imageUrl = response.data.data[0].url;
          setImages(
            [
              ...images,
              { message: message, author: "User", timestamp: new Date() },
              { message: imageUrl, author: "DALL-E", timestamp: new Date() }
            ]
          );
        } else {
          console.log('No response from API.');
        }
        setLoading(false);
      })
      .catch(error => console.log(error));
  }

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [conversation]);

  return (
    <div className="d-flex flex-column h-100">
      <div className="flex-grow-1 overflow-auto">
        <Button className="new-conversation-button" variant="dark" onClick={handleClearHistory}>Start a new conversation</Button>
        <div className="container-fluid row chat-window">
          <div ref={chatContainerRef} className="message-list">
            <ul>
              {conversation.concat(images).map((chat, index) => (
                <li key={index} className={`chat-bubble ${chat.author.toLowerCase()}`}>
                  <div style={{ whiteSpace: "pre-wrap" }}>
                    <strong>{chat.author}:</strong>
                    {chat.author === 'DALL-E' &&
                      <img src={chat.message} alt="Generated by DALL-E" />
                    }
                    {chat.author === 'AI' &&
                      <div>{chat.message.replace(/```(.+?)```/gs, (match, code) => {
                        return hljs.highlightAuto(code).value;
                      }).trim()}</div>
                    }
                    {chat.author !== 'AI' && chat.author !== 'DALL-E' && <div>{chat.message}</div>}
                  </div>
                  <div>
                    <em>{chat.timestamp.toLocaleString()}</em>
                  </div>
                </li>
              ))}
              {loading && <div>
                <li key={conversation.length - 1} className='chat-bubble ai'>
                  <TypeAnimation
                    sequence={['AI is typing...', 1000, '']}
                    speed={75}
                    deletionSpeed={75}
                    wrapper="div"
                    repeat={Infinity}
                  />
                </li>
              </div>}
            </ul>
          </div>
          <div className="form-container d-flex w-100" resize="vertical">
            <form className="form-inline w-100 message-input" onSubmit={handleSubmit}>
              <textarea
                type="text"
                className="form-control w-100"
                placeholder="Type a message"
                aria-describedby="button-addon2"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
              />
              <Button 
                className="btn btn-outline-secondary" 
                type="button" 
                id="button-addon3" 
                variant="secondary"
                title="Settings" 
                onClick={() => setShowSettingsModal(true)}
              ><FontAwesomeIcon icon={faGear} size="1x" /></Button>
              <Button 
                className="btn btn-outline-secondary"
                type="button" id="button-addon4"
                variant="secondary"
                title="Request Image"
                onClick={handleRequestImage}
              ><FontAwesomeIcon icon={faImage} size="1x" /></Button>
              <Button
                className="btn btn-outline-secondary" 
                id="button-addon2" 
                variant="primary" 
                type="submit"
                title="Send message"
              ><FontAwesomeIcon icon={faPaperPlane} size="1x" /></Button>
            </form>
          </div>
          <ChatWindowSettings 
            temperature={temperature}
            setTemperature={setTemperature} 
            apiKey={apiKey} 
            setApiKey={setApiKey} 
            model={model} 
            setModel={setModel} 
            maxTokens={maxTokens} 
            setMaxTokens={setMaxTokens} 
            showSettingsModal={showSettingsModal} 
            setShowSettingsModal={setShowSettingsModal} 
            imageResolution={imageResolution} 
            setImageResolution={setImageResolution} 
            frequencyPenalty={frequencyPenalty} 
            setFrequencyPenalty={setFrequencyPenalty} 
            presencePenalty={presencePenalty} 
            setPresencePenalty={setPresencePenalty}
          ></ChatWindowSettings>
        </div>
      </div>
    </div>
  );
}

export default ChatWindow;